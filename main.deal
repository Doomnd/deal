dealer Main {
  fn main() {
   // Dataflow with methods and return
    let mut dar = data { d: 0, m: 0 };
    dar.plus() |> dar.plus()  |> dar.give() -> (s, r)|> take(s,r);
//
   }
}

member data {
  d: int
  m: int
}

fn (d: data) plus() {
  d["d"] = d.d + 1;
  d["m"] = d.m + 2;
}

fn (d: data) give() -> (int, int){
return d.d, d.m
}

// Methods and free functions
fn (s: Point) translate(dx: int, dy: int) {
  s["x"] = s.x + dx;
  print (s["x"])
  s["y"] = s.y + dy;
  print (s["y"])
}

fn move_by(p: Point, dx: int, dy: int) {
  p.translate(dx, dy);
}

dealer red {
  members{}
  fn red(){
    print("this is red calling from mars")
  }
}

//fn give_number() -> int { return 5; }
//fn take_numbers(r: int){ print(r) }

fn take (d : data){
    print("hey this is", d.x, d.y);
}
