dealer Main {
  fn main() {
    // Nested lists: 2D matrix and nested iteration
//    let matrix: int[][] = [ [1, 2], [3, 4, 5], int[] ];
//    for r_idx, row in matrix {
//      for c_idx, v in row {
//        print(v);
//      }
//    }
//
    // Empty nested typed list literal (2D); no output expected
//    let empty2d = int[][];
//    for _ in empty2d { print(_index); }

    // Go-like index assignment on list
//    let xs = [10, 20, 30];
//    xs[1] = 99;
//    print(xs[1]);

    // Define a struct and call its method
    let p = Point { x: 1, y: 2 };
//    move_by(p, 10, 20);
//    p.translate(1, 1);
//    print(p.x);
//    print(p.y);

    // Dataflow operator examples: value |> function
//    1 |> print;
//    "goood" |> print;
//    2 + 1 * 3 |> print;
//    p.x |> print;


    // Dataflow with methods and return
    let mut dar = data { d: 0, m: 0 };
    dar.plus() |> dar.plus() |> dar.give() |> take;

   }
}

member data {
  d: int
  m: int
}

fn (d: data) plus() {
  d["d"] = d.d + 1;
  d["m"] = d.m + 2;
}

fn (d: data) give(){
}

// Methods and free functions
fn (s: Point) translate(dx: int, dy: int) {
  s["x"] = s.x + dx;
  print (s["x"])
  s["y"] = s.y + dy;
  print (s["y"])
}

fn move_by(p: Point, dx: int, dy: int) {
  p.translate(dx, dy);
}

// Blue dealer removed in this minimal demo
dealer red {
  members{}
  fn red(){
    print("this is red calling from mars")
  }
}

//fn give_number() -> int { return 5; }
//fn take_numbers(r: int){ print(r) }

fn take (d : data){
    print("hey this is", d.x, d.y);
}
